{"version":3,"sources":["store/currentTodo.ts","store/loading.ts","store/index.ts","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","App.tsx","index.tsx"],"names":["todoState","id","title","completed","userId","todoReducer","todo","action","type","selectors","loading","loadingReducer","actions","setTodos","startLoading","finishLoading","state","selectorsLoading","reducer","combineReducers","store","createStore","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","className","TodoModal","todos","resetTodoId","selectTodoId","useState","user","setUser","dispatch","useDispatch","currentTodo","find","td","currentUserId","useEffect","userFromServer","onClick","href","name","TodoList","onResetTodoId","selectTodo","onSelectTodo","map","classNames","TodoFilter","selectEl","selectedTodos","onSelectedTodos","query","resetQuery","onResetQuery","filter","onFilter","value","onChange","placeholder","style","pointerEvents","length","App","todoId","setTodoId","setQuery","certainTypeTodos","setCertainTypeTodos","useSelector","todosFromServer","finally","visibleTodos","toLowerCase","includes","event","target","userIdFromTodo","Root","ReactDOM","render","document","getElementById"],"mappings":"mNAOaA,EAAkB,CAC7BC,GAAI,EACJC,MAAO,GACPC,WAAW,EACXC,OAAQ,GAgBKC,EATK,WAAiD,IAAhDC,EAA+C,uDAAxCN,EAAWO,EAA6B,uCAClE,MACO,aADCA,EAAOC,KAEJD,EAAOD,KAEPA,GCIAG,EACA,SAACC,GAAD,OAA0BA,GAGxBC,EApBQ,WAAyD,IAAxDD,IAAuD,yDAAnBH,EAAmB,uCAC7E,OAAQA,EAAOC,MACb,IAAK,gBACH,OAAO,EACT,IAAK,iBACH,OAAO,EACT,QACE,OAAOE,ICHAE,EFDU,CACrBC,SAAU,SAACP,GAAD,MAAiB,CAAEE,KAAM,WAAYF,UEApCM,EDOU,CACrBE,aAAc,iBAAO,CAAEN,KAAM,kBAC7BO,cAAe,iBAAO,CAAEP,KAAM,oBCPnBC,EACC,SAACO,GAAD,OACVC,EAA2BD,EAAMN,UAI/BQ,EAAUC,YAAgB,CAC9Bb,KAAMD,EACNK,QAASC,IAGES,EAAQC,YAAYH,G,cChBjC,SAASI,EAAOC,GAEd,IARYC,EAQNC,EAVS,iEAUYF,EAAM,QAEjC,OAVYC,EAUA,IATL,IAAIE,SAAQ,SAAAC,GACjBC,WAAWD,EAASH,OASnBK,MAAK,kBAAMC,MAAML,MACjBI,MAAK,SAAAE,GAAG,OAAIA,EAAIC,U,MAGd,I,OClBMC,EAAmB,kBAC9B,qBAAKC,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,uB,iBCUNC,EAA6B,SAAC,GAIpC,IAHLC,EAGI,EAHJA,MACAC,EAEI,EAFJA,YACAC,EACI,EADJA,aAEA,EAAwBC,qBAAxB,mBAAOC,EAAP,KAAaC,EAAb,KACMC,EAAWC,cAEXC,EAAcR,EAAMS,MAAK,SAAAC,GAAE,OAAIA,EAAG7C,KAAOqC,KACzCS,GAA2B,OAAXH,QAAW,IAAXA,OAAA,EAAAA,EAAaxC,SAAU,EAW7C,OATIwC,GACFF,EAAS9B,EAAoBC,SAAS+B,IAGxCI,qBAAU,WFPW,IAAC5C,KEQZ2C,EFR+BzB,EAAG,iBAAiBlB,KESxDyB,MAAK,SAAAoB,GAAc,OAAIR,EAAQQ,QACjC,CAACF,IAGF,sBAAKb,UAAU,kBAAkB,UAAQ,QAAzC,UACE,qBAAKA,UAAU,qBAEbM,EAGA,sBAAKN,UAAU,aAAf,UACE,yBAAQA,UAAU,kBAAlB,UACE,qBACEA,UAAU,0CACV,UAAQ,eAFV,yBAIYI,KAGZ,wBACE9B,KAAK,SACL0B,UAAU,SACV,UAAQ,cACRgB,QAASb,OAIb,sBAAKH,UAAU,kBAAf,UACE,mBAAGA,UAAU,QAAQ,UAAQ,cAA7B,gBACGU,QADH,IACGA,OADH,EACGA,EAAa1C,QAGhB,oBAAGgC,UAAU,QAAQ,UAAQ,aAA7B,UACc,OAAXU,QAAW,IAAXA,KAAazC,UACZ,wBAAQ+B,UAAU,mBAAlB,kBAEA,wBAAQA,UAAU,kBAAlB,qBAGD,OAED,mBAAGiB,KAAK,2BAAR,SACGX,EAAKY,gBAlCd,cAAC,EAAD,QC5BKC,EAA4B,SAAC,GAKnC,IAJLjB,EAII,EAJJA,MACeC,EAGX,EAHJiB,cACcC,EAEV,EAFJC,aACAlB,EACI,EADJA,aAEA,OACE,qCACE,wBAAOJ,UAAU,+BAAjB,UACE,gCACE,+BACE,mCACA,6BACE,sBAAMA,UAAU,OAAhB,SACE,mBAAGA,UAAU,qBAGjB,uCACA,wCAIJ,gCACGE,EAAMqB,KAAI,SAACnD,GAAD,OACT,qBAAI,UAAQ,OAAZ,UACE,oBAAI4B,UAAU,eAAd,SAA8B5B,EAAKL,KAEnC,oBAAIiC,UAAU,eAAd,SACG5B,EAAKH,UACJ,sBAAM+B,UAAU,OAAhB,SACE,mBAAGA,UAAU,eAAe,UAAQ,oBAGtC,sBAAMA,UAAU,OAAhB,sBAMJ,oBAAIA,UAAU,2BAAd,SACE,mBAAGA,UAAWwB,IACZ,CACE,mBAAoBpD,EAAKH,UACzB,mBAAoBG,EAAKH,YAH7B,SAOGG,EAAKJ,UAIV,oBAAIgC,UAAU,8BAAd,SACGI,IAAiBhC,EAAKL,GACrB,wBACEiD,QAAS,WACPK,EAAW,IAEb,UAAQ,eACRrB,UAAU,iBACV1B,KAAK,SANP,SAQE,sBAAM0B,UAAU,OAAhB,SACE,mBAAGA,UAAU,yBAIjB,wBACEgB,QAAS,WACPK,EAAWjD,EAAKL,KAElB,UAAQ,eACRiC,UAAU,SACV1B,KAAK,SANP,SAQE,sBAAM0B,UAAU,OAAhB,SACE,mBAAGA,UAAU,uBAnDC5B,EAAKL,YA6DjB,IAAjBqC,GACC,cAAC,EAAD,CACEF,MAAOA,EACPC,YAAaA,EACbC,aAAcA,QC5FXqB,EAA8B,SAAC,GAMrC,IALLC,EAKI,EALJA,SACiBC,EAIb,EAJJC,gBACAC,EAGI,EAHJA,MACcC,EAEV,EAFJC,aACUC,EACN,EADJC,SAEA,OACE,uBAAMjC,UAAU,mBAAhB,UACE,mBAAGA,UAAU,UAAb,SACE,sBAAMA,UAAU,SAAhB,SACE,yBACEkC,MAAOR,EACPS,SAAUR,EACV,UAAQ,eAHV,UAKE,wBAAQO,MAAM,MAAd,iBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,YAAd,8BAKN,oBAAGlC,UAAU,qDAAb,UACE,uBACE,UAAQ,cACR1B,KAAK,OACL0B,UAAU,QACVoC,YAAY,YACZlB,KAAK,QACLgB,MAAOL,EACPM,SAAUH,IAEZ,sBAAMhC,UAAU,eAAhB,SACE,mBAAGA,UAAU,8BAGf,sBAAMA,UAAU,gBAAgBqC,MAAO,CAAEC,cAAe,OAAxD,SACGT,EAAMU,OAAS,GACd,wBACE,UAAQ,oBACRjE,KAAK,SACL0B,UAAU,SACVgB,QAASc,aCrCVU,G,YAAM,WAEjB,MAA0BnC,mBAAiB,IAA3C,mBAAOH,EAAP,KAAcvB,EAAd,KACA,EAA4B0B,mBAAS,GAArC,mBAAOoC,EAAP,KAAeC,EAAf,KACA,EAA0BrC,mBAAS,IAAnC,mBAAOwB,EAAP,KAAcc,EAAd,KACA,EAAgDtC,mBAAS,OAAzD,mBAAOuC,EAAP,KAAyBC,EAAzB,KAGMrE,EAAUsE,YAAYvE,GACtBiC,EAAWC,cAEjBK,qBAAU,WACRN,EAAS9B,EAAuBE,gBLNNQ,EAAY,UKSnCO,MAAK,SAAAoD,GAAe,OAAIpE,EAASoE,MACjCC,SAAQ,kBAAMxC,EAAS9B,EAAuBG,sBAChD,IAGH,IAyBMoE,EAba/C,EAAM8B,QAAO,SAAC5D,GAC/B,OAAQwE,GACN,IAAK,MAML,QACE,OAAOxE,EALT,IAAK,SACH,OAA0B,IAAnBA,EAAKH,UACd,IAAK,YACH,OAA0B,IAAnBG,EAAKH,cAMc+D,QAAO,SAAC5D,GACtC,OAAOA,EAAKJ,MAAMkF,cAAcC,SAAStB,MAW3C,OACE,mCACE,qBAAK7B,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,oBAEA,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,CACE0B,SAAUkB,EACVhB,gBA/Ca,SAACwB,GAC1BP,EAAoBO,EAAMC,OAAOnB,QA+CrBL,MAAOA,EACPE,aApBK,WACjBY,EAAS,KAoBGV,SA9CS,SAACmB,GACtBT,EAASS,EAAMC,OAAOnB,MAAMgB,oBAiDpB,qBAAKlD,UAAU,QAAf,SACGxB,EACC,cAAC,EAAD,IAEA,cAAC,EAAD,CACE0B,MAAO+C,EACP7B,cA3BI,WAClBsB,EAAU,IA2BItC,aAAcqC,EACdnB,aAtDQ,SAACgC,GACvBZ,EAAUY,mBCrCRC,EAAO,kBACX,cAAC,IAAD,CAAUrE,MAAOA,EAAjB,SACE,cAAC,IAAD,UACE,cAAC,EAAD,SAKNsE,IAASC,OAAO,cAAC,EAAD,IAAUC,SAASC,eAAe,W","file":"static/js/main.4367a8ad.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\ntype TodoAction = {\n  type: 'SET_TODO',\n  todo: Todo,\n};\n\nexport const todoState: Todo = {\n  id: 0,\n  title: '',\n  completed: false,\n  userId: 0,\n};\n\nexport const actions = {\n  setTodos: (todo: Todo) => ({ type: 'SET_TODO', todo }),\n};\n\nconst todoReducer = (todo = todoState, action: TodoAction): Todo => {\n  switch (action.type) {\n    case 'SET_TODO':\n      return action.todo;\n    default:\n      return todo;\n  }\n};\n\nexport default todoReducer;\n","const startLoading = 'loading/start';\nconst finishLoading = 'loading/finish';\n\ntype Action = {\n  type: typeof startLoading | typeof finishLoading;\n};\n\nexport type LoadingType = boolean;\n\nconst initialState = true;\n\nconst loadingReducer = (loading:LoadingType = initialState, action: Action) => {\n  switch (action.type) {\n    case 'loading/start':\n      return true;\n    case 'loading/finish':\n      return false;\n    default:\n      return loading;\n  }\n};\n\nexport const actions = {\n  startLoading: () => ({ type: 'loading/start' }),\n  finishLoading: () => ({ type: 'loading/finish' }),\n};\n\nexport const selectors = {\n  isLoading: (loading: LoadingType) => loading,\n};\n\nexport default loadingReducer;\n","import {\n  createStore,\n  combineReducers,\n} from 'redux';\n\nimport todoReducer, {\n  actions as todoActions,\n\n} from './currentTodo';\n\nimport loadingReducer, {\n  actions as loadingActions,\n  selectors as selectorsLoading,\n} from './loading';\n\nexport const actions = { todoActions, loadingActions };\n\nexport const selectors = {\n  getLoading: (state: { loading: boolean }) => (\n    selectorsLoading.isLoading(state.loading)\n  ),\n};\n\nconst reducer = combineReducers({\n  todo: todoReducer,\n  loading: loadingReducer,\n});\n\nexport const store = createStore(reducer);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(1000)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable jsx-a11y/control-has-associated-label */\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getUser } from '../../api';\nimport { actions } from '../../store';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  todos: Todo[],\n  resetTodoId: () => void,\n  selectTodoId: number,\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  todos,\n  resetTodoId,\n  selectTodoId,\n}) => {\n  const [user, setUser] = useState<User>();\n  const dispatch = useDispatch();\n\n  const currentTodo = todos.find(td => td.id === selectTodoId);\n  const currentUserId = currentTodo?.userId || 0;\n\n  if (currentTodo) {\n    dispatch(actions.todoActions.setTodos(currentTodo));\n  }\n\n  useEffect(() => {\n    getUser(currentUserId)\n      .then(userFromServer => setUser(userFromServer));\n  }, [currentUserId]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectTodoId}`}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={resetTodoId}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {currentTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {currentTodo?.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href=\"mailto:Sincere@april.biz\">\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { TodoModal } from '../TodoModal';\n\ntype Props = {\n  todos: Todo[],\n  onResetTodoId: () => void,\n  onSelectTodo: (userIdFromTodo: number) => void,\n  selectTodoId: number,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  onResetTodoId: resetTodoId,\n  onSelectTodo: selectTodo,\n  selectTodoId,\n}) => {\n  return (\n    <>\n      <table className=\"table is-narrow is-fullwidth\">\n        <thead>\n          <tr>\n            <th>#</th>\n            <th>\n              <span className=\"icon\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {todos.map((todo) => (\n            <tr data-cy=\"todo\" key={todo.id}>\n              <td className=\"is-vcentered\">{todo.id}</td>\n\n              <td className=\"is-vcentered\">\n                {todo.completed ? (\n                  <span className=\"icon\">\n                    <i className=\"fas fa-check\" data-cy=\"iconCompleted\" />\n                  </span>\n                ) : (\n                  <span className=\"icon\">\n                    &#10006;\n                  </span>\n                )}\n              </td>\n\n              <td className=\"is-vcentered is-expanded\">\n                <p className={classNames(\n                  {\n                    'has-text-danger': !todo.completed,\n                    'has-text-success': todo.completed,\n                  },\n                )}\n                >\n                  {todo.title}\n                </p>\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                {selectTodoId === todo.id ? (\n                  <button\n                    onClick={() => {\n                      selectTodo(0);\n                    }}\n                    data-cy=\"selectButton\"\n                    className=\"button is-link\"\n                    type=\"button\"\n                  >\n                    <span className=\"icon\">\n                      <i className=\"far fa-eye-slash\" />\n                    </span>\n                  </button>\n                ) : (\n                  <button\n                    onClick={() => {\n                      selectTodo(todo.id);\n                    }}\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                  >\n                    <span className=\"icon\">\n                      <i className=\"far fa-eye\" />\n                    </span>\n                  </button>\n                )}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n\n      {selectTodoId !== 0 && (\n        <TodoModal\n          todos={todos}\n          resetTodoId={resetTodoId}\n          selectTodoId={selectTodoId}\n        />\n      )}\n    </>\n  );\n};\n","/* eslint-disable jsx-a11y/control-has-associated-label */\ntype Props = {\n  selectEl: string,\n  onSelectedTodos: (event: { target: { value: string } }) => void,\n  query: string,\n  onResetQuery: () => void,\n  onFilter: (event: { target: { value: string }; }) => void,\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  selectEl,\n  onSelectedTodos: selectedTodos,\n  query,\n  onResetQuery: resetQuery,\n  onFilter: filter,\n}) => {\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            value={selectEl}\n            onChange={selectedTodos}\n            data-cy=\"statusSelect\"\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          name=\"query\"\n          value={query}\n          onChange={filter}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {query.length > 0 && (\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={resetQuery}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","/* HOOKS */\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect, useState } from 'react';\n/* API, , STORE and TYPES */\nimport { selectors, actions } from './store';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\n/* COMPONENTS */\nimport { Loader } from './components/Loader';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\n/* STYLES */\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nexport const App = () => {\n  /* STATES */\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [todoId, setTodoId] = useState(0);\n  const [query, setQuery] = useState('');\n  const [certainTypeTodos, setCertainTypeTodos] = useState('all');\n\n  /* REDUX HOOKS */\n  const loading = useSelector(selectors.getLoading);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(actions.loadingActions.startLoading());\n\n    getTodos()\n      .then(todosFromServer => setTodos(todosFromServer))\n      .finally(() => dispatch(actions.loadingActions.finishLoading()));\n  }, []);\n\n  /* FUNCTIONS */\n  const handlSelectedTodos = (event: { target: { value: string; }; }) => {\n    setCertainTypeTodos(event.target.value);\n  };\n\n  const handleSetQuery = (event: { target: { value: string; }; }) => {\n    setQuery(event.target.value.toLowerCase());\n  };\n\n  const handleUserIdBtn = (userIdFromTodo: number) => {\n    setTodoId(userIdFromTodo);\n  };\n\n  const selectedBy = todos.filter((todo: Todo) => {\n    switch (certainTypeTodos) {\n      case 'all':\n        return todo;\n      case 'active':\n        return todo.completed === false;\n      case 'completed':\n        return todo.completed === true;\n      default:\n        return todo;\n    }\n  });\n\n  const visibleTodos = selectedBy.filter((todo) => {\n    return todo.title.toLowerCase().includes(query);\n  });\n\n  const resetQuery = () => {\n    setQuery('');\n  };\n\n  const resetTodoId = () => {\n    setTodoId(0);\n  };\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                selectEl={certainTypeTodos}\n                onSelectedTodos={handlSelectedTodos}\n                query={query}\n                onResetQuery={resetQuery}\n                onFilter={handleSetQuery}\n              />\n            </div>\n\n            <div className=\"block\">\n              {loading ? (\n                <Loader />\n              ) : (\n                <TodoList\n                  todos={visibleTodos}\n                  onResetTodoId={resetTodoId}\n                  selectTodoId={todoId}\n                  onSelectTodo={handleUserIdBtn}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './store';\nimport { App } from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}