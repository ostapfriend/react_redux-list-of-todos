{"version":3,"sources":["store/currentTodo.ts","store/loading.ts","store/index.ts","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","App.tsx","index.tsx"],"names":["SET_TODO","todoState","todo","id","title","completed","userId","actions","setTodos","type","todoReducer","state","action","loadingState","loading","loadingReducer","todoActions","startLoading","finishLoading","selectors","isLoading","reducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","className","TodoModal","todos","resetTodoId","selectTodoId","useState","user","setUser","dispatch","useDispatch","currentTodo","find","td","currentUserId","useEffect","userFromServer","onClick","href","name","TodoList","selectTodo","map","classNames","TodoFilter","selectEl","selectedTodos","query","resetQuery","filter","value","onChange","placeholder","style","pointerEvents","length","App","todoId","setTodoId","setQuery","certainTypeTodos","setCertainTypeTodos","useSelector","todosFromServer","handlSelectedTodos","event","a","target","handleSetQuery","toLowerCase","handleUserIdBtn","userIdFromTodo","visibleTodos","includes","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d0987629.chunk.js","sourcesContent":["import { AnyAction } from 'redux';\n\nimport { Todo } from '../types/Todo';\n\nconst SET_TODO = 'SET_TODO';\n\nexport type TodoType = {\n  todo: {\n    id: number,\n    title: string,\n    completed: boolean,\n    userId: number,\n  }\n};\n\nexport const todoState: TodoType = {\n  todo: {\n    id: 0,\n    title: '',\n    completed: false,\n    userId: 0,\n  },\n};\n\nexport const actions = {\n  setTodos: (todo: Todo) => ({ type: SET_TODO, todo }),\n};\n\nconst todoReducer = (state = todoState, action: AnyAction): TodoType => {\n  switch (action.type) {\n    case SET_TODO:\n      return {\n        todo: action.todo,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default todoReducer;\n","type Action = {\n  type: 'START_LOADING' | 'FINISH_LOADING';\n};\n\nexport type LoadingType = {\n  loading: boolean;\n};\n\nexport const loadingState: LoadingType = {\n  loading: false,\n};\n\nconst loadingReducer = (state = loadingState, action: Action) => {\n  switch (action.type) {\n    case 'START_LOADING':\n      return {\n        ...state,\n        loading: true,\n      };\n    case 'FINISH_LOADING':\n      return {\n        ...state,\n        loading: false,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const actions = {\n  startLoading: () => ({\n    type: 'START_LOADING',\n  }),\n\n  finishLoading: () => ({\n    type: 'FINISH_LOADING',\n  }),\n};\n\nexport const selectorsLoading = {\n  isLoading: (state: LoadingType) => state.loading,\n};\n\nexport default loadingReducer;\n","import {\n  applyMiddleware,\n  createStore,\n  combineReducers,\n} from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport todoReducer, {\n  actions as todoActions,\n\n} from './currentTodo';\n\nimport loadingReducer, {\n  actions as loadingActions,\n  selectorsLoading,\n} from './loading';\n\nexport const actions = { todoActions, loadingActions };\n\nexport const selectors = {\n  selectorsLoading,\n};\n\nconst reducer = combineReducers({\n  todoReducer,\n  loadingReducer,\n});\n\nexport const store = createStore(\n  reducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(1000)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getUser } from '../../api';\nimport { actions } from '../../store';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  todos: Todo[],\n  resetTodoId: () => void,\n  selectTodoId: number,\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  todos,\n  resetTodoId,\n  selectTodoId,\n}) => {\n  const [user, setUser] = useState<User>();\n  const dispatch = useDispatch();\n\n  const currentTodo = todos.find(td => td.id === selectTodoId);\n  const currentUserId = currentTodo?.userId || 0;\n\n  if (currentTodo) {\n    const action = actions.todoActions.setTodos(currentTodo);\n\n    dispatch(action);\n  }\n\n  useEffect(() => {\n    getUser(currentUserId)\n      .then(userFromServer => setUser(userFromServer));\n  }, [currentUserId]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectTodoId}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={resetTodoId}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {currentTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {currentTodo?.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href=\"mailto:Sincere@april.biz\">\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { TodoModal } from '../TodoModal';\n\ntype Props = {\n  todos: Todo[],\n  resetTodoId: () => void,\n  selectTodo: (userIdFromTodo: number) => Promise<void>,\n  selectTodoId: number,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  resetTodoId,\n  selectTodo,\n  selectTodoId,\n}) => {\n  return (\n    <>\n      <table className=\"table is-narrow is-fullwidth\">\n        <thead>\n          <tr>\n            <th>#</th>\n            <th>\n              <span className=\"icon\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {todos.map((todo) => (\n            <tr data-cy=\"todo\" key={todo.id}>\n              <td className=\"is-vcentered\">{todo.id}</td>\n\n              <td className=\"is-vcentered\">\n                {todo.completed ? (\n                  <span className=\"icon\">\n                    <i className=\"fas fa-check\" data-cy=\"iconCompleted\" />\n                  </span>\n                ) : (\n                  <span className=\"icon\">\n                    &#10006;\n                  </span>\n                )}\n              </td>\n\n              <td className=\"is-vcentered is-expanded\">\n                <p className={classNames(\n                  {\n                    'has-text-danger': !todo.completed,\n                    'has-text-success': todo.completed,\n                  },\n                )}\n                >\n                  {todo.title}\n                </p>\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                {selectTodoId === todo.id ? (\n                  <button\n                    onClick={() => {\n                      selectTodo(0);\n                    }}\n                    data-cy=\"selectButton\"\n                    className=\"button is-link\"\n                    type=\"button\"\n                  >\n                    <span className=\"icon\">\n                      <i className=\"far fa-eye-slash\" />\n                    </span>\n                  </button>\n                ) : (\n                  <button\n                    onClick={() => {\n                      selectTodo(todo.id);\n                    }}\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                  >\n                    <span className=\"icon\">\n                      <i className=\"far fa-eye\" />\n                    </span>\n                  </button>\n                )}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n\n      {selectTodoId !== 0 && (\n        <TodoModal\n          todos={todos}\n          resetTodoId={resetTodoId}\n          selectTodoId={selectTodoId}\n        />\n      )}\n    </>\n  );\n};\n","/* eslint-disable jsx-a11y/control-has-associated-label */\ntype Props = {\n  selectEl: string,\n  selectedTodos: (event: { target: { value: string }; }) => Promise<void>,\n  query: string,\n  resetQuery: () => void,\n  filter: (event: { target: { value: string }; }) => Promise<void>,\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  selectEl,\n  selectedTodos,\n  query,\n  resetQuery,\n  filter,\n}) => {\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            value={selectEl}\n            onChange={selectedTodos}\n            data-cy=\"statusSelect\"\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          name=\"query\"\n          value={query}\n          onChange={filter}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {query.length > 0 && (\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={resetQuery}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","/* HOOKS */\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect, useState } from 'react';\n/* API, , STORE and TYPES */\nimport { actions, selectors } from './store';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\n/* COMPONENTS */\nimport { Loader } from './components/Loader';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\n/* STYLES */\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nexport const App = () => {\n  /* STATES */\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [todoId, setTodoId] = useState(0);\n  const [query, setQuery] = useState('');\n  const [certainTypeTodos, setCertainTypeTodos] = useState('all');\n\n  /* REDUX HOOKS */\n  const loading = useSelector(selectors.selectorsLoading.isLoading);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    getTodos().then(todosFromServer => setTodos(todosFromServer));\n\n    dispatch(actions.loadingActions.startLoading());\n\n    if (todos) {\n      const action = actions.loadingActions.finishLoading();\n\n      /* Added so we can see the Loader */\n      setTimeout(() => dispatch(action), 1000);\n    }\n  }, []);\n\n  /* FUNCTIONS */\n  const handlSelectedTodos = async (event: { target: { value: string; }; }) => {\n    setCertainTypeTodos(event.target.value);\n  };\n\n  const handleSetQuery = async (event: { target: { value: string; }; }) => {\n    setQuery(event.target.value.toLowerCase());\n  };\n\n  const handleUserIdBtn = async (userIdFromTodo: number) => {\n    setTodoId(userIdFromTodo);\n  };\n\n  const selectedBy = todos.filter((todo: Todo) => {\n    switch (certainTypeTodos) {\n      case 'all':\n        return todo;\n      case 'active':\n        return todo.completed === false;\n      case 'completed':\n        return todo.completed === true;\n      default:\n        return todo;\n    }\n  });\n\n  const visibleTodos = selectedBy.filter((todo) => {\n    return todo.title.toLowerCase().includes(query);\n  });\n\n  const resetQuery = async () => {\n    setQuery('');\n  };\n\n  const resetTodoId = async () => {\n    setTodoId(0);\n  };\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                selectEl={certainTypeTodos}\n                selectedTodos={handlSelectedTodos}\n                query={query}\n                resetQuery={resetQuery}\n                filter={handleSetQuery}\n              />\n            </div>\n\n            <div className=\"block\">\n              {loading ? (\n                <Loader />\n              ) : (\n                <TodoList\n                  todos={visibleTodos}\n                  resetTodoId={resetTodoId}\n                  selectTodoId={todoId}\n                  selectTodo={handleUserIdBtn}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}